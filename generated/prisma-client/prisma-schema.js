module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBalanceUpdate {
  count: Int!
}

type AggregateBroker {
  count: Int!
}

type AggregateInvestment {
  count: Int!
}

type AggregateSequelizeMeta {
  count: Int!
}

type AggregateTransaction {
  count: Int!
}

type BalanceUpdate {
  id: Int!
  amount: Float!
  createdAt: DateTime!
  date: DateTime!
  investmentId: Investment!
  updatedAt: DateTime!
}

type BalanceUpdateConnection {
  pageInfo: PageInfo!
  edges: [BalanceUpdateEdge]!
  aggregate: AggregateBalanceUpdate!
}

input BalanceUpdateCreateInput {
  amount: Float!
  date: DateTime!
  investmentId: InvestmentCreateOneWithoutBalanceUpdatesInput!
}

input BalanceUpdateCreateManyWithoutInvestmentIdInput {
  create: [BalanceUpdateCreateWithoutInvestmentIdInput!]
  connect: [BalanceUpdateWhereUniqueInput!]
}

input BalanceUpdateCreateWithoutInvestmentIdInput {
  amount: Float!
  date: DateTime!
}

type BalanceUpdateEdge {
  node: BalanceUpdate!
  cursor: String!
}

enum BalanceUpdateOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  createdAt_ASC
  createdAt_DESC
  date_ASC
  date_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BalanceUpdatePreviousValues {
  id: Int!
  amount: Float!
  createdAt: DateTime!
  date: DateTime!
  updatedAt: DateTime!
}

input BalanceUpdateScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [BalanceUpdateScalarWhereInput!]
  OR: [BalanceUpdateScalarWhereInput!]
  NOT: [BalanceUpdateScalarWhereInput!]
}

type BalanceUpdateSubscriptionPayload {
  mutation: MutationType!
  node: BalanceUpdate
  updatedFields: [String!]
  previousValues: BalanceUpdatePreviousValues
}

input BalanceUpdateSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BalanceUpdateWhereInput
  AND: [BalanceUpdateSubscriptionWhereInput!]
  OR: [BalanceUpdateSubscriptionWhereInput!]
  NOT: [BalanceUpdateSubscriptionWhereInput!]
}

input BalanceUpdateUpdateInput {
  amount: Float
  date: DateTime
  investmentId: InvestmentUpdateOneRequiredWithoutBalanceUpdatesInput
}

input BalanceUpdateUpdateManyDataInput {
  amount: Float
  date: DateTime
}

input BalanceUpdateUpdateManyMutationInput {
  amount: Float
  date: DateTime
}

input BalanceUpdateUpdateManyWithoutInvestmentIdInput {
  create: [BalanceUpdateCreateWithoutInvestmentIdInput!]
  delete: [BalanceUpdateWhereUniqueInput!]
  connect: [BalanceUpdateWhereUniqueInput!]
  set: [BalanceUpdateWhereUniqueInput!]
  disconnect: [BalanceUpdateWhereUniqueInput!]
  update: [BalanceUpdateUpdateWithWhereUniqueWithoutInvestmentIdInput!]
  upsert: [BalanceUpdateUpsertWithWhereUniqueWithoutInvestmentIdInput!]
  deleteMany: [BalanceUpdateScalarWhereInput!]
  updateMany: [BalanceUpdateUpdateManyWithWhereNestedInput!]
}

input BalanceUpdateUpdateManyWithWhereNestedInput {
  where: BalanceUpdateScalarWhereInput!
  data: BalanceUpdateUpdateManyDataInput!
}

input BalanceUpdateUpdateWithoutInvestmentIdDataInput {
  amount: Float
  date: DateTime
}

input BalanceUpdateUpdateWithWhereUniqueWithoutInvestmentIdInput {
  where: BalanceUpdateWhereUniqueInput!
  data: BalanceUpdateUpdateWithoutInvestmentIdDataInput!
}

input BalanceUpdateUpsertWithWhereUniqueWithoutInvestmentIdInput {
  where: BalanceUpdateWhereUniqueInput!
  update: BalanceUpdateUpdateWithoutInvestmentIdDataInput!
  create: BalanceUpdateCreateWithoutInvestmentIdInput!
}

input BalanceUpdateWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  investmentId: InvestmentWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [BalanceUpdateWhereInput!]
  OR: [BalanceUpdateWhereInput!]
  NOT: [BalanceUpdateWhereInput!]
}

input BalanceUpdateWhereUniqueInput {
  id: Int
}

type BatchPayload {
  count: Long!
}

type Broker {
  id: Int!
  createdAt: DateTime!
  investments(where: InvestmentWhereInput, orderBy: InvestmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Investment!]
  name: String!
  updatedAt: DateTime!
}

type BrokerConnection {
  pageInfo: PageInfo!
  edges: [BrokerEdge]!
  aggregate: AggregateBroker!
}

input BrokerCreateInput {
  investments: InvestmentCreateManyWithoutBrokerIdInput
  name: String!
}

input BrokerCreateOneWithoutInvestmentsInput {
  create: BrokerCreateWithoutInvestmentsInput
  connect: BrokerWhereUniqueInput
}

input BrokerCreateWithoutInvestmentsInput {
  name: String!
}

type BrokerEdge {
  node: Broker!
  cursor: String!
}

enum BrokerOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BrokerPreviousValues {
  id: Int!
  createdAt: DateTime!
  name: String!
  updatedAt: DateTime!
}

type BrokerSubscriptionPayload {
  mutation: MutationType!
  node: Broker
  updatedFields: [String!]
  previousValues: BrokerPreviousValues
}

input BrokerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BrokerWhereInput
  AND: [BrokerSubscriptionWhereInput!]
  OR: [BrokerSubscriptionWhereInput!]
  NOT: [BrokerSubscriptionWhereInput!]
}

input BrokerUpdateInput {
  investments: InvestmentUpdateManyWithoutBrokerIdInput
  name: String
}

input BrokerUpdateManyMutationInput {
  name: String
}

input BrokerUpdateOneRequiredWithoutInvestmentsInput {
  create: BrokerCreateWithoutInvestmentsInput
  update: BrokerUpdateWithoutInvestmentsDataInput
  upsert: BrokerUpsertWithoutInvestmentsInput
  connect: BrokerWhereUniqueInput
}

input BrokerUpdateWithoutInvestmentsDataInput {
  name: String
}

input BrokerUpsertWithoutInvestmentsInput {
  update: BrokerUpdateWithoutInvestmentsDataInput!
  create: BrokerCreateWithoutInvestmentsInput!
}

input BrokerWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  investments_every: InvestmentWhereInput
  investments_some: InvestmentWhereInput
  investments_none: InvestmentWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [BrokerWhereInput!]
  OR: [BrokerWhereInput!]
  NOT: [BrokerWhereInput!]
}

input BrokerWhereUniqueInput {
  id: Int
}

scalar DateTime

type Investment {
  id: Int!
  balanceUpdates(where: BalanceUpdateWhereInput, orderBy: BalanceUpdateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BalanceUpdate!]
  brokerId: Broker!
  createdAt: DateTime!
  name: String!
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction!]
  updatedAt: DateTime!
}

type InvestmentConnection {
  pageInfo: PageInfo!
  edges: [InvestmentEdge]!
  aggregate: AggregateInvestment!
}

input InvestmentCreateInput {
  balanceUpdates: BalanceUpdateCreateManyWithoutInvestmentIdInput
  brokerId: BrokerCreateOneWithoutInvestmentsInput!
  name: String!
  transactions: TransactionCreateManyWithoutInvestmentIdInput
}

input InvestmentCreateManyWithoutBrokerIdInput {
  create: [InvestmentCreateWithoutBrokerIdInput!]
  connect: [InvestmentWhereUniqueInput!]
}

input InvestmentCreateOneWithoutBalanceUpdatesInput {
  create: InvestmentCreateWithoutBalanceUpdatesInput
  connect: InvestmentWhereUniqueInput
}

input InvestmentCreateOneWithoutTransactionsInput {
  create: InvestmentCreateWithoutTransactionsInput
  connect: InvestmentWhereUniqueInput
}

input InvestmentCreateWithoutBalanceUpdatesInput {
  brokerId: BrokerCreateOneWithoutInvestmentsInput!
  name: String!
  transactions: TransactionCreateManyWithoutInvestmentIdInput
}

input InvestmentCreateWithoutBrokerIdInput {
  balanceUpdates: BalanceUpdateCreateManyWithoutInvestmentIdInput
  name: String!
  transactions: TransactionCreateManyWithoutInvestmentIdInput
}

input InvestmentCreateWithoutTransactionsInput {
  balanceUpdates: BalanceUpdateCreateManyWithoutInvestmentIdInput
  brokerId: BrokerCreateOneWithoutInvestmentsInput!
  name: String!
}

type InvestmentEdge {
  node: Investment!
  cursor: String!
}

enum InvestmentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InvestmentPreviousValues {
  id: Int!
  createdAt: DateTime!
  name: String!
  updatedAt: DateTime!
}

input InvestmentScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [InvestmentScalarWhereInput!]
  OR: [InvestmentScalarWhereInput!]
  NOT: [InvestmentScalarWhereInput!]
}

type InvestmentSubscriptionPayload {
  mutation: MutationType!
  node: Investment
  updatedFields: [String!]
  previousValues: InvestmentPreviousValues
}

input InvestmentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InvestmentWhereInput
  AND: [InvestmentSubscriptionWhereInput!]
  OR: [InvestmentSubscriptionWhereInput!]
  NOT: [InvestmentSubscriptionWhereInput!]
}

input InvestmentUpdateInput {
  balanceUpdates: BalanceUpdateUpdateManyWithoutInvestmentIdInput
  brokerId: BrokerUpdateOneRequiredWithoutInvestmentsInput
  name: String
  transactions: TransactionUpdateManyWithoutInvestmentIdInput
}

input InvestmentUpdateManyDataInput {
  name: String
}

input InvestmentUpdateManyMutationInput {
  name: String
}

input InvestmentUpdateManyWithoutBrokerIdInput {
  create: [InvestmentCreateWithoutBrokerIdInput!]
  delete: [InvestmentWhereUniqueInput!]
  connect: [InvestmentWhereUniqueInput!]
  set: [InvestmentWhereUniqueInput!]
  disconnect: [InvestmentWhereUniqueInput!]
  update: [InvestmentUpdateWithWhereUniqueWithoutBrokerIdInput!]
  upsert: [InvestmentUpsertWithWhereUniqueWithoutBrokerIdInput!]
  deleteMany: [InvestmentScalarWhereInput!]
  updateMany: [InvestmentUpdateManyWithWhereNestedInput!]
}

input InvestmentUpdateManyWithWhereNestedInput {
  where: InvestmentScalarWhereInput!
  data: InvestmentUpdateManyDataInput!
}

input InvestmentUpdateOneRequiredWithoutBalanceUpdatesInput {
  create: InvestmentCreateWithoutBalanceUpdatesInput
  update: InvestmentUpdateWithoutBalanceUpdatesDataInput
  upsert: InvestmentUpsertWithoutBalanceUpdatesInput
  connect: InvestmentWhereUniqueInput
}

input InvestmentUpdateOneRequiredWithoutTransactionsInput {
  create: InvestmentCreateWithoutTransactionsInput
  update: InvestmentUpdateWithoutTransactionsDataInput
  upsert: InvestmentUpsertWithoutTransactionsInput
  connect: InvestmentWhereUniqueInput
}

input InvestmentUpdateWithoutBalanceUpdatesDataInput {
  brokerId: BrokerUpdateOneRequiredWithoutInvestmentsInput
  name: String
  transactions: TransactionUpdateManyWithoutInvestmentIdInput
}

input InvestmentUpdateWithoutBrokerIdDataInput {
  balanceUpdates: BalanceUpdateUpdateManyWithoutInvestmentIdInput
  name: String
  transactions: TransactionUpdateManyWithoutInvestmentIdInput
}

input InvestmentUpdateWithoutTransactionsDataInput {
  balanceUpdates: BalanceUpdateUpdateManyWithoutInvestmentIdInput
  brokerId: BrokerUpdateOneRequiredWithoutInvestmentsInput
  name: String
}

input InvestmentUpdateWithWhereUniqueWithoutBrokerIdInput {
  where: InvestmentWhereUniqueInput!
  data: InvestmentUpdateWithoutBrokerIdDataInput!
}

input InvestmentUpsertWithoutBalanceUpdatesInput {
  update: InvestmentUpdateWithoutBalanceUpdatesDataInput!
  create: InvestmentCreateWithoutBalanceUpdatesInput!
}

input InvestmentUpsertWithoutTransactionsInput {
  update: InvestmentUpdateWithoutTransactionsDataInput!
  create: InvestmentCreateWithoutTransactionsInput!
}

input InvestmentUpsertWithWhereUniqueWithoutBrokerIdInput {
  where: InvestmentWhereUniqueInput!
  update: InvestmentUpdateWithoutBrokerIdDataInput!
  create: InvestmentCreateWithoutBrokerIdInput!
}

input InvestmentWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  balanceUpdates_every: BalanceUpdateWhereInput
  balanceUpdates_some: BalanceUpdateWhereInput
  balanceUpdates_none: BalanceUpdateWhereInput
  brokerId: BrokerWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  transactions_every: TransactionWhereInput
  transactions_some: TransactionWhereInput
  transactions_none: TransactionWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [InvestmentWhereInput!]
  OR: [InvestmentWhereInput!]
  NOT: [InvestmentWhereInput!]
}

input InvestmentWhereUniqueInput {
  id: Int
}

scalar Long

type Mutation {
  createBalanceUpdate(data: BalanceUpdateCreateInput!): BalanceUpdate!
  updateBalanceUpdate(data: BalanceUpdateUpdateInput!, where: BalanceUpdateWhereUniqueInput!): BalanceUpdate
  updateManyBalanceUpdates(data: BalanceUpdateUpdateManyMutationInput!, where: BalanceUpdateWhereInput): BatchPayload!
  upsertBalanceUpdate(where: BalanceUpdateWhereUniqueInput!, create: BalanceUpdateCreateInput!, update: BalanceUpdateUpdateInput!): BalanceUpdate!
  deleteBalanceUpdate(where: BalanceUpdateWhereUniqueInput!): BalanceUpdate
  deleteManyBalanceUpdates(where: BalanceUpdateWhereInput): BatchPayload!
  createBroker(data: BrokerCreateInput!): Broker!
  updateBroker(data: BrokerUpdateInput!, where: BrokerWhereUniqueInput!): Broker
  updateManyBrokers(data: BrokerUpdateManyMutationInput!, where: BrokerWhereInput): BatchPayload!
  upsertBroker(where: BrokerWhereUniqueInput!, create: BrokerCreateInput!, update: BrokerUpdateInput!): Broker!
  deleteBroker(where: BrokerWhereUniqueInput!): Broker
  deleteManyBrokers(where: BrokerWhereInput): BatchPayload!
  createInvestment(data: InvestmentCreateInput!): Investment!
  updateInvestment(data: InvestmentUpdateInput!, where: InvestmentWhereUniqueInput!): Investment
  updateManyInvestments(data: InvestmentUpdateManyMutationInput!, where: InvestmentWhereInput): BatchPayload!
  upsertInvestment(where: InvestmentWhereUniqueInput!, create: InvestmentCreateInput!, update: InvestmentUpdateInput!): Investment!
  deleteInvestment(where: InvestmentWhereUniqueInput!): Investment
  deleteManyInvestments(where: InvestmentWhereInput): BatchPayload!
  createSequelizeMeta(data: SequelizeMetaCreateInput!): SequelizeMeta!
  deleteSequelizeMeta(where: SequelizeMetaWhereUniqueInput!): SequelizeMeta
  deleteManySequelizeMetas(where: SequelizeMetaWhereInput): BatchPayload!
  createTransaction(data: TransactionCreateInput!): Transaction!
  updateTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
  updateManyTransactions(data: TransactionUpdateManyMutationInput!, where: TransactionWhereInput): BatchPayload!
  upsertTransaction(where: TransactionWhereUniqueInput!, create: TransactionCreateInput!, update: TransactionUpdateInput!): Transaction!
  deleteTransaction(where: TransactionWhereUniqueInput!): Transaction
  deleteManyTransactions(where: TransactionWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  balanceUpdate(where: BalanceUpdateWhereUniqueInput!): BalanceUpdate
  balanceUpdates(where: BalanceUpdateWhereInput, orderBy: BalanceUpdateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BalanceUpdate]!
  balanceUpdatesConnection(where: BalanceUpdateWhereInput, orderBy: BalanceUpdateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BalanceUpdateConnection!
  broker(where: BrokerWhereUniqueInput!): Broker
  brokers(where: BrokerWhereInput, orderBy: BrokerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Broker]!
  brokersConnection(where: BrokerWhereInput, orderBy: BrokerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BrokerConnection!
  investment(where: InvestmentWhereUniqueInput!): Investment
  investments(where: InvestmentWhereInput, orderBy: InvestmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Investment]!
  investmentsConnection(where: InvestmentWhereInput, orderBy: InvestmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InvestmentConnection!
  sequelizeMeta(where: SequelizeMetaWhereUniqueInput!): SequelizeMeta
  sequelizeMetas(where: SequelizeMetaWhereInput, orderBy: SequelizeMetaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SequelizeMeta]!
  sequelizeMetasConnection(where: SequelizeMetaWhereInput, orderBy: SequelizeMetaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SequelizeMetaConnection!
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction]!
  transactionsConnection(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TransactionConnection!
  node(id: ID!): Node
}

type SequelizeMeta {
  name: ID!
}

type SequelizeMetaConnection {
  pageInfo: PageInfo!
  edges: [SequelizeMetaEdge]!
  aggregate: AggregateSequelizeMeta!
}

input SequelizeMetaCreateInput {
  name: ID
}

type SequelizeMetaEdge {
  node: SequelizeMeta!
  cursor: String!
}

enum SequelizeMetaOrderByInput {
  name_ASC
  name_DESC
}

type SequelizeMetaPreviousValues {
  name: ID!
}

type SequelizeMetaSubscriptionPayload {
  mutation: MutationType!
  node: SequelizeMeta
  updatedFields: [String!]
  previousValues: SequelizeMetaPreviousValues
}

input SequelizeMetaSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SequelizeMetaWhereInput
  AND: [SequelizeMetaSubscriptionWhereInput!]
  OR: [SequelizeMetaSubscriptionWhereInput!]
  NOT: [SequelizeMetaSubscriptionWhereInput!]
}

input SequelizeMetaWhereInput {
  name: ID
  name_not: ID
  name_in: [ID!]
  name_not_in: [ID!]
  name_lt: ID
  name_lte: ID
  name_gt: ID
  name_gte: ID
  name_contains: ID
  name_not_contains: ID
  name_starts_with: ID
  name_not_starts_with: ID
  name_ends_with: ID
  name_not_ends_with: ID
  AND: [SequelizeMetaWhereInput!]
  OR: [SequelizeMetaWhereInput!]
  NOT: [SequelizeMetaWhereInput!]
}

input SequelizeMetaWhereUniqueInput {
  name: ID
}

type Subscription {
  balanceUpdate(where: BalanceUpdateSubscriptionWhereInput): BalanceUpdateSubscriptionPayload
  broker(where: BrokerSubscriptionWhereInput): BrokerSubscriptionPayload
  investment(where: InvestmentSubscriptionWhereInput): InvestmentSubscriptionPayload
  sequelizeMeta(where: SequelizeMetaSubscriptionWhereInput): SequelizeMetaSubscriptionPayload
  transaction(where: TransactionSubscriptionWhereInput): TransactionSubscriptionPayload
}

type Transaction {
  id: Int!
  amount: Float!
  createdAt: DateTime!
  date: DateTime!
  investmentId: Investment!
  updatedAt: DateTime!
}

type TransactionConnection {
  pageInfo: PageInfo!
  edges: [TransactionEdge]!
  aggregate: AggregateTransaction!
}

input TransactionCreateInput {
  amount: Float!
  date: DateTime!
  investmentId: InvestmentCreateOneWithoutTransactionsInput!
}

input TransactionCreateManyWithoutInvestmentIdInput {
  create: [TransactionCreateWithoutInvestmentIdInput!]
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateWithoutInvestmentIdInput {
  amount: Float!
  date: DateTime!
}

type TransactionEdge {
  node: Transaction!
  cursor: String!
}

enum TransactionOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  createdAt_ASC
  createdAt_DESC
  date_ASC
  date_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TransactionPreviousValues {
  id: Int!
  amount: Float!
  createdAt: DateTime!
  date: DateTime!
  updatedAt: DateTime!
}

input TransactionScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TransactionScalarWhereInput!]
  OR: [TransactionScalarWhereInput!]
  NOT: [TransactionScalarWhereInput!]
}

type TransactionSubscriptionPayload {
  mutation: MutationType!
  node: Transaction
  updatedFields: [String!]
  previousValues: TransactionPreviousValues
}

input TransactionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TransactionWhereInput
  AND: [TransactionSubscriptionWhereInput!]
  OR: [TransactionSubscriptionWhereInput!]
  NOT: [TransactionSubscriptionWhereInput!]
}

input TransactionUpdateInput {
  amount: Float
  date: DateTime
  investmentId: InvestmentUpdateOneRequiredWithoutTransactionsInput
}

input TransactionUpdateManyDataInput {
  amount: Float
  date: DateTime
}

input TransactionUpdateManyMutationInput {
  amount: Float
  date: DateTime
}

input TransactionUpdateManyWithoutInvestmentIdInput {
  create: [TransactionCreateWithoutInvestmentIdInput!]
  delete: [TransactionWhereUniqueInput!]
  connect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutInvestmentIdInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutInvestmentIdInput!]
  deleteMany: [TransactionScalarWhereInput!]
  updateMany: [TransactionUpdateManyWithWhereNestedInput!]
}

input TransactionUpdateManyWithWhereNestedInput {
  where: TransactionScalarWhereInput!
  data: TransactionUpdateManyDataInput!
}

input TransactionUpdateWithoutInvestmentIdDataInput {
  amount: Float
  date: DateTime
}

input TransactionUpdateWithWhereUniqueWithoutInvestmentIdInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutInvestmentIdDataInput!
}

input TransactionUpsertWithWhereUniqueWithoutInvestmentIdInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutInvestmentIdDataInput!
  create: TransactionCreateWithoutInvestmentIdInput!
}

input TransactionWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  investmentId: InvestmentWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
}

input TransactionWhereUniqueInput {
  id: Int
}
`
      }
    